[{"/home/xiphi/zns-dapp/src/index.tsx":"1","/home/xiphi/zns-dapp/src/reportWebVitals.ts":"2","/home/xiphi/zns-dapp/src/App.tsx":"3","/home/xiphi/zns-dapp/src/components/wallet.tsx":"4","/home/xiphi/zns-dapp/src/lib/connectors.ts":"5","/home/xiphi/zns-dapp/src/components/spinner.tsx":"6","/home/xiphi/zns-dapp/src/components/domains.tsx":"7","/home/xiphi/zns-dapp/src/lib/domains.ts":"8","/home/xiphi/zns-dapp/src/lib/contracts.ts":"9","/home/xiphi/zns-dapp/src/lib/addresses.ts":"10","/home/xiphi/zns-dapp/src/lib/network.ts":"11","/home/xiphi/zns-dapp/src/types/index.ts":"12","/home/xiphi/zns-dapp/src/types/factories/Registrar__factory.ts":"13","/home/xiphi/zns-dapp/src/lib/useDomainStore.ts":"14","/home/xiphi/zns-dapp/src/lib/provider-hooks.ts":"15","/home/xiphi/zns-dapp/src/lib/useDomainCache.tsx":"16"},{"size":500,"mtime":1609111599786,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1608865646091,"results":"19","hashOfConfig":"18"},{"size":1481,"mtime":1609195548330,"results":"20","hashOfConfig":"18"},{"size":13719,"mtime":1609194956956,"results":"21","hashOfConfig":"18"},{"size":2327,"mtime":1608961725164,"results":"22","hashOfConfig":"18"},{"size":780,"mtime":1608936867613,"results":"23","hashOfConfig":"18"},{"size":548,"mtime":1609196145523,"results":"24","hashOfConfig":"18"},{"size":597,"mtime":1609121602693,"results":"25","hashOfConfig":"18"},{"size":1062,"mtime":1609141991305,"results":"26","hashOfConfig":"18"},{"size":333,"mtime":1608873568968,"results":"27","hashOfConfig":"18"},{"size":412,"mtime":1609141874176,"results":"28","hashOfConfig":"18"},{"size":206,"mtime":1608870310336,"results":"29","hashOfConfig":"18"},{"size":11551,"mtime":1608870310326,"results":"30","hashOfConfig":"18"},{"size":3660,"mtime":1609195724938,"results":"31","hashOfConfig":"18"},{"size":2384,"mtime":1609194927511,"results":"32","hashOfConfig":"18"},{"size":768,"mtime":1609195540358,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"10a8f0j",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/home/xiphi/zns-dapp/src/index.tsx",[],["72","73"],"/home/xiphi/zns-dapp/src/reportWebVitals.ts",[],"/home/xiphi/zns-dapp/src/App.tsx",["74","75","76","77","78","79","80","81","82"],"import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useWeb3React, Web3ReactProvider } from \"@web3-react/core\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport Wallet from \"./components/wallet\";\nimport { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport Domains from \"./components/domains\";\nimport { DomainCacheProvider } from \"./lib/useDomainCache\";\n\nconst client = new ApolloClient({\n  uri: \"http://localhost:8000/subgraphs/name/zer0-os/ZNS-subgraph\",\n  cache: new InMemoryCache(),\n});\n\nfunction getLibrary(provider: any): Web3Provider {\n  const library = new Web3Provider(provider);\n  library.pollingInterval = 12000;\n  return library;\n}\nfunction App() {\n  const [connect, setConnect] = useState(false);\n  const context = useWeb3React<Web3Provider>();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error,\n  } = context;\n  const onClick = () => {\n    setConnect(!connect);\n  };\n  return (\n    <>\n      <button onClick={onClick}>{connect ? \"Close\" : \"Connect wallet\"}</button>\n      {connect && <Wallet />}\n      <Domains />\n    </>\n  );\n}\n\nfunction wrappedApp() {\n  return (\n    <ApolloProvider client={client}>\n      <Web3ReactProvider getLibrary={getLibrary}>\n        <DomainCacheProvider>\n          <App />\n        </DomainCacheProvider>\n      </Web3ReactProvider>\n    </ApolloProvider>\n  );\n}\n\nexport default wrappedApp;\n","/home/xiphi/zns-dapp/src/components/wallet.tsx",["83"],"import React from \"react\";\nimport {\n  Web3ReactProvider,\n  useWeb3React,\n  UnsupportedChainIdError,\n} from \"@web3-react/core\";\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from \"@web3-react/injected-connector\";\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect } from \"@web3-react/walletconnect-connector\";\nimport { UserRejectedRequestError as UserRejectedRequestErrorFrame } from \"@web3-react/frame-connector\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { formatEther } from \"@ethersproject/units\";\nimport _ from \"lodash\";\nimport { useEagerConnect, useInactiveListener } from \"../lib/provider-hooks\";\nimport {\n  injected,\n  network,\n  walletconnect,\n  walletlink,\n  ledger,\n  trezor,\n  frame,\n  authereum,\n  fortmatic,\n  magic,\n  portis,\n  torus,\n} from \"../lib/connectors\";\nimport { Spinner } from \"./spinner\";\nimport { AbstractConnector } from \"@web3-react/abstract-connector\";\n\nenum ConnectorNames {\n  Injected = \"Injected\",\n  Network = \"Network\",\n  WalletConnect = \"WalletConnect\",\n  WalletLink = \"WalletLink\",\n  Ledger = \"Ledger\",\n  Trezor = \"Trezor\",\n  Frame = \"Frame\",\n  Authereum = \"Authereum\",\n  Fortmatic = \"Fortmatic\",\n  Magic = \"Magic\",\n  Portis = \"Portis\",\n  Torus = \"Torus\",\n}\n\nconst connectorsByName: {\n  [connectorName in ConnectorNames]: AbstractConnector;\n} = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.Network]: network,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.WalletLink]: walletlink,\n  [ConnectorNames.Ledger]: ledger,\n  [ConnectorNames.Trezor]: trezor,\n  [ConnectorNames.Frame]: frame,\n  [ConnectorNames.Authereum]: authereum,\n  [ConnectorNames.Fortmatic]: fortmatic,\n  [ConnectorNames.Magic]: magic,\n  [ConnectorNames.Portis]: portis,\n  [ConnectorNames.Torus]: torus,\n};\n\nfunction getErrorMessage(error: Error) {\n  if (error instanceof NoEthereumProviderError) {\n    return \"No Ethereum browser extension detected, install MetaMask on desktop or visit from a dApp browser on mobile.\";\n  } else if (error instanceof UnsupportedChainIdError) {\n    return \"You're connected to an unsupported network.\";\n  } else if (\n    error instanceof UserRejectedRequestErrorInjected ||\n    error instanceof UserRejectedRequestErrorWalletConnect ||\n    error instanceof UserRejectedRequestErrorFrame\n  ) {\n    return \"Please authorize this website to access your Ethereum account.\";\n  } else {\n    console.error(error);\n    return \"An unknown error occurred. Check the console for more details.\";\n  }\n}\n\nfunction ChainId() {\n  const { chainId } = useWeb3React();\n\n  return (\n    <>\n      <span>Chain Id</span>\n      <span role=\"img\" aria-label=\"chain\">\n        â›“\n      </span>\n      <span>{chainId ?? \"\"}</span>\n    </>\n  );\n}\n\nfunction BlockNumber() {\n  const { chainId, library } = useWeb3React();\n\n  const [blockNumber, setBlockNumber] = React.useState<number | null>();\n  React.useEffect((): any => {\n    if (!!library) {\n      let stale = false;\n\n      library\n        .getBlockNumber()\n        .then((blockNumber: number) => {\n          if (!stale) {\n            setBlockNumber(blockNumber);\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            setBlockNumber(null);\n          }\n        });\n\n      const updateBlockNumber = (blockNumber: number) => {\n        setBlockNumber(blockNumber);\n      };\n      library.on(\"block\", updateBlockNumber);\n\n      return () => {\n        stale = true;\n        library.removeListener(\"block\", updateBlockNumber);\n        setBlockNumber(undefined);\n      };\n    }\n  }, [library, chainId]); // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return (\n    <>\n      <span>Block Number</span>\n      <span role=\"img\" aria-label=\"numbers\">\n        ðŸ”¢\n      </span>\n      <span>{blockNumber === null ? \"Error\" : blockNumber ?? \"\"}</span>\n    </>\n  );\n}\n\nfunction Account() {\n  const { account } = useWeb3React();\n\n  return (\n    <>\n      <span>Account</span>\n      <span role=\"img\" aria-label=\"robot\">\n        ðŸ¤–\n      </span>\n      <span>\n        {account === null\n          ? \"-\"\n          : account\n          ? `${account.substring(0, 6)}...${account.substring(\n              account.length - 4\n            )}`\n          : \"\"}\n      </span>\n    </>\n  );\n}\n\nfunction Balance() {\n  const { account, library, chainId } = useWeb3React();\n\n  const [balance, setBalance] = React.useState<any>();\n  React.useEffect((): any => {\n    if (!!account && !!library) {\n      let stale = false;\n\n      library\n        .getBalance(account)\n        .then((balance: any) => {\n          if (!stale) {\n            setBalance(balance);\n          }\n        })\n        .catch(() => {\n          if (!stale) {\n            setBalance(null);\n          }\n        });\n\n      return () => {\n        stale = true;\n        setBalance(undefined);\n      };\n    }\n  }, [account, library, chainId]); // ensures refresh if referential identity of library doesn't change across chainIds\n\n  return (\n    <>\n      <span>Balance</span>\n      <span role=\"img\" aria-label=\"gold\">\n        ðŸ’°\n      </span>\n      <span>\n        {balance === null ? \"Error\" : balance ? `Îž${formatEther(balance)}` : \"\"}\n      </span>\n    </>\n  );\n}\n\nfunction Header() {\n  const { active, error } = useWeb3React();\n\n  return (\n    <>\n      <h1 style={{ margin: \"1rem\", textAlign: \"right\" }}>\n        {active ? \"ðŸŸ¢\" : error ? \"ðŸ”´\" : \"ðŸŸ \"}\n      </h1>\n      <h3\n        style={{\n          display: \"grid\",\n          gridGap: \"1rem\",\n          gridTemplateColumns: \"1fr min-content 1fr\",\n          maxWidth: \"20rem\",\n          lineHeight: \"2rem\",\n          margin: \"auto\",\n        }}\n      >\n        <ChainId />\n        <BlockNumber />\n        <Account />\n        <Balance />\n      </h3>\n    </>\n  );\n}\n\nexport default function Wallet() {\n  const context = useWeb3React<Web3Provider>();\n  const {\n    connector,\n    library,\n    chainId,\n    account,\n    activate,\n    deactivate,\n    active,\n    error,\n  } = context;\n\n  // handle logic to recognize the connector currently being activated\n  const [activatingConnector, setActivatingConnector] = React.useState<any>();\n  React.useEffect(() => {\n    if (activatingConnector && activatingConnector === connector) {\n      setActivatingConnector(undefined);\n    }\n  }, [activatingConnector, connector]);\n\n  // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n  const triedEager = useEagerConnect();\n\n  // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n  useInactiveListener(!triedEager || !!activatingConnector);\n\n  return (\n    <>\n      <Header />\n      <hr style={{ margin: \"2rem\" }} />\n      <div\n        style={{\n          display: \"grid\",\n          gridGap: \"1rem\",\n          gridTemplateColumns: \"1fr 1fr\",\n          maxWidth: \"20rem\",\n          margin: \"auto\",\n        }}\n      >\n        {(_.keys(connectorsByName) as ConnectorNames[]).map((name) => {\n          const currentConnector = connectorsByName[name];\n          const activating = currentConnector === activatingConnector;\n          const connected = currentConnector === connector;\n          const disabled =\n            !triedEager || !!activatingConnector || connected || !!error;\n\n          return (\n            <button\n              style={{\n                height: \"3rem\",\n                borderRadius: \"1rem\",\n                borderColor: activating\n                  ? \"orange\"\n                  : connected\n                  ? \"green\"\n                  : \"unset\",\n                cursor: disabled ? \"unset\" : \"pointer\",\n                position: \"relative\",\n              }}\n              disabled={disabled}\n              key={name}\n              onClick={() => {\n                setActivatingConnector(currentConnector);\n                activate(connectorsByName[name]);\n              }}\n            >\n              <div\n                style={{\n                  position: \"absolute\",\n                  top: \"0\",\n                  left: \"0\",\n                  height: \"100%\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  color: \"black\",\n                  margin: \"0 0 0 1rem\",\n                }}\n              >\n                {activating && (\n                  <Spinner\n                    color={\"black\"}\n                    style={{ height: \"25%\", marginLeft: \"-1rem\" }}\n                  />\n                )}\n                {connected && (\n                  <span role=\"img\" aria-label=\"check\">\n                    âœ…\n                  </span>\n                )}\n              </div>\n              {name}\n            </button>\n          );\n        })}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        {(active || error) && (\n          <button\n            style={{\n              height: \"3rem\",\n              marginTop: \"2rem\",\n              borderRadius: \"1rem\",\n              borderColor: \"red\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              deactivate();\n            }}\n          >\n            Deactivate\n          </button>\n        )}\n\n        {!!error && (\n          <h4 style={{ marginTop: \"1rem\", marginBottom: \"0\" }}>\n            {getErrorMessage(error)}\n          </h4>\n        )}\n      </div>\n\n      <hr style={{ margin: \"2rem\" }} />\n\n      <div\n        style={{\n          display: \"grid\",\n          gridGap: \"1rem\",\n          gridTemplateColumns: \"fit-content\",\n          maxWidth: \"20rem\",\n          margin: \"auto\",\n        }}\n      >\n        {!!(library && account) && (\n          <button\n            style={{\n              height: \"3rem\",\n              borderRadius: \"1rem\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              library\n                .getSigner(account)\n                .signMessage(\"ðŸ‘‹\")\n                .then((signature: any) => {\n                  window.alert(`Success!\\n\\n${signature}`);\n                })\n                .catch((error: any) => {\n                  window.alert(\n                    \"Failure!\" +\n                      (error && error.message ? `\\n\\n${error.message}` : \"\")\n                  );\n                });\n            }}\n          >\n            Sign Message\n          </button>\n        )}\n        {!!(\n          connector === connectorsByName[ConnectorNames.Network] && chainId\n        ) && (\n          <button\n            style={{\n              height: \"3rem\",\n              borderRadius: \"1rem\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              (connector as any).changeChainId(chainId === 1 ? 4 : 1);\n            }}\n          >\n            Switch Networks\n          </button>\n        )}\n        {connector === connectorsByName[ConnectorNames.WalletConnect] && (\n          <button\n            style={{\n              height: \"3rem\",\n              borderRadius: \"1rem\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              (connector as any).close();\n            }}\n          >\n            Kill WalletConnect Session\n          </button>\n        )}\n        {connector === connectorsByName[ConnectorNames.WalletLink] && (\n          <button\n            style={{\n              height: \"3rem\",\n              borderRadius: \"1rem\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              (connector as any).close();\n            }}\n          >\n            Kill WalletLink Session\n          </button>\n        )}\n        {connector === connectorsByName[ConnectorNames.Fortmatic] && (\n          <button\n            style={{\n              height: \"3rem\",\n              borderRadius: \"1rem\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              (connector as any).close();\n            }}\n          >\n            Kill Fortmatic Session\n          </button>\n        )}\n        {connector === connectorsByName[ConnectorNames.Magic] && (\n          <button\n            style={{\n              height: \"3rem\",\n              borderRadius: \"1rem\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              (connector as any).close();\n            }}\n          >\n            Kill Magic Session\n          </button>\n        )}\n        {connector === connectorsByName[ConnectorNames.Portis] && (\n          <>\n            {chainId !== undefined && (\n              <button\n                style={{\n                  height: \"3rem\",\n                  borderRadius: \"1rem\",\n                  cursor: \"pointer\",\n                }}\n                onClick={() => {\n                  (connector as any).changeNetwork(chainId === 1 ? 100 : 1);\n                }}\n              >\n                Switch Networks\n              </button>\n            )}\n            <button\n              style={{\n                height: \"3rem\",\n                borderRadius: \"1rem\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => {\n                (connector as any).close();\n              }}\n            >\n              Kill Portis Session\n            </button>\n          </>\n        )}\n        {connector === connectorsByName[ConnectorNames.Torus] && (\n          <button\n            style={{\n              height: \"3rem\",\n              borderRadius: \"1rem\",\n              cursor: \"pointer\",\n            }}\n            onClick={() => {\n              (connector as any).close();\n            }}\n          >\n            Kill Torus Session\n          </button>\n        )}\n      </div>\n    </>\n  );\n}\n","/home/xiphi/zns-dapp/src/lib/connectors.ts",[],"/home/xiphi/zns-dapp/src/components/spinner.tsx",[],"/home/xiphi/zns-dapp/src/components/domains.tsx",["84","85"],"/home/xiphi/zns-dapp/src/lib/domains.ts",[],["86","87"],"/home/xiphi/zns-dapp/src/lib/contracts.ts",["88","89","90","91","92","93","94"],"/home/xiphi/zns-dapp/src/lib/addresses.ts",[],"/home/xiphi/zns-dapp/src/lib/network.ts",[],"/home/xiphi/zns-dapp/src/types/index.ts",[],"/home/xiphi/zns-dapp/src/types/factories/Registrar__factory.ts",[],"/home/xiphi/zns-dapp/src/lib/useDomainStore.ts",["95","96","97","98","99","100","101","102","103","104","105","106","107","108"],"import {\n  ApolloQueryResult,\n  DocumentNode,\n  gql,\n  OperationVariables,\n  QueryHookOptions,\n  QueryResult,\n  TypedDocumentNode,\n  useLazyQuery,\n  useQuery,\n} from \"@apollo/client\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { Query, queryByRole } from \"@testing-library/react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Maybe } from \"true-myth\";\nimport { useZnsContracts } from \"./contracts\";\nimport { getDomainId } from \"./domains\";\nconst { Just, Nothing } = Maybe;\n\ninterface Domain {\n  id: string;\n  domain: string;\n  children: string[];\n  owner: string;\n  controller: string;\n}\n\ninterface ControlledDomainsData {\n  domains: Domain[];\n}\n\ninterface DomainData {\n  domain: Domain;\n}\n\ninterface DomainState {\n  domains: { [id: string]: Domain };\n  controlled: Domain[];\n}\n\nconst domainQuery = gql`\n  query Domain($id: ID!) {\n    domain(id: $id) {\n      id\n      domain\n      children\n      owner\n      controller\n    }\n  }\n`;\n\nconst controlledDomainsQuery = gql`\n  query ControlledDomains($owner: Bytes!) {\n    domains(where: { owner: $owner }) {\n      id\n      domain\n      children\n      owner\n      controller\n    }\n  }\n`;\n\ntype RefetchQuery<T> = (\n  variables: Partial<Record<string, any>>\n) => Promise<ApolloQueryResult<T>>;\n\nfunction useDomain(id: string) {\n  const { error, data, refetch } = useQuery<DomainData>(domainQuery, {\n    variables: { id },\n  });\n\n  const _domain: Maybe<Domain> = useMemo(() => {\n    if (error) {\n      // TODO: maybe throw?\n      console.error(error);\n    }\n    if (data) {\n      return new Just(data.domain);\n    }\n    return new Nothing();\n  }, [data]);\n\n  return { domain: _domain, refetchDomain: refetch };\n}\n\nfunction createUseDomain(\n  setState: (domain: Maybe<Domain>) => void\n): (\n  domain: string\n) => {\n  domain: Maybe<Domain>;\n  refetchDomain: RefetchQuery<DomainData>;\n} {\n  return (domain: string) => {\n    const { domain: _domain, refetchDomain } = useDomain(\n      domain === \"_root\" ? \"0\" : getDomainId(domain)\n    );\n    useEffect(() => setState(_domain), [_domain]);\n\n    return { domain: _domain, refetchDomain };\n  };\n}\n\nfunction useControlledDomains(): {\n  controlled: Maybe<Domain[]>;\n  refetchControlled: RefetchQuery<ControlledDomainsData>;\n} {\n  const context = useWeb3React<Web3Provider>();\n  const { library, account, active, chainId } = context;\n  const [\n    getControlled,\n    { data, refetch, error },\n  ] = useLazyQuery<ControlledDomainsData>(controlledDomainsQuery, {\n    variables: { owner: account },\n  });\n\n  const controlled: Maybe<Domain[]> = useMemo(() => {\n    if (error) {\n      // TODO: maybe throw?\n      console.error(error);\n    }\n    if (data) {\n      return new Just(data.domains);\n    }\n    return new Nothing();\n  }, [data]);\n  useEffect(() => {\n    if (refetch) {\n      refetch({ variables: { owner: account } });\n    } else if (account) {\n      getControlled({ variables: { owner: account } });\n    }\n  }, [account]);\n  return { controlled, refetchControlled: refetch! };\n}\n\nconst useDomainStore = () => {\n  const [state, setState] = useState<DomainState>({\n    domains: {},\n    controlled: [],\n  });\n  const getDomain = createUseDomain(\n    useCallback(\n      (domain: Maybe<Domain>) => {\n        if (domain.isJust()) {\n          const _domain = domain.unsafelyUnwrap();\n          const domains = { ...state.domains, [_domain.domain]: _domain };\n          setState({ ...state, domains });\n        }\n      },\n      [state, setState]\n    )\n  );\n  const controlled = useControlledDomains();\n\n  return { getDomain, ...controlled, state };\n};\n\nexport { useDomainStore };\n","/home/xiphi/zns-dapp/src/lib/provider-hooks.ts",["109"],"import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { injected } from './connectors'\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3React()\n\n  const [tried, setTried] = useState(false)\n\n  useEffect(() => {\n    injected.isAuthorized().then((isAuthorized: boolean) => {\n      if (isAuthorized) {\n        activate(injected, undefined, true).catch(() => {\n          setTried(true)\n        })\n      } else {\n        setTried(true)\n      }\n    })\n  }, []) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (!tried && active) {\n      setTried(true)\n    }\n  }, [tried, active])\n\n  return tried\n}\n\nexport function useInactiveListener(suppress: boolean = false) {\n  const { active, error, activate } = useWeb3React()\n\n  useEffect((): any => {\n    const { ethereum } = window as any\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleConnect = () => {\n        console.log(\"Handling 'connect' event\")\n        activate(injected)\n      }\n      const handleChainChanged = (chainId: string | number) => {\n        console.log(\"Handling 'chainChanged' event with payload\", chainId)\n        activate(injected)\n      }\n      const handleAccountsChanged = (accounts: string[]) => {\n        console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n        if (accounts.length > 0) {\n          activate(injected)\n        }\n      }\n      const handleNetworkChanged = (networkId: string | number) => {\n        console.log(\"Handling 'networkChanged' event with payload\", networkId)\n        activate(injected)\n      }\n\n      ethereum.on('connect', handleConnect)\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n      ethereum.on('networkChanged', handleNetworkChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('connect', handleConnect)\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n          ethereum.removeListener('networkChanged', handleNetworkChanged)\n        }\n      }\n    }\n  }, [active, error, suppress, activate])\n}","/home/xiphi/zns-dapp/src/lib/useDomainCache.tsx",[],{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","severity":1,"message":"115","line":2,"column":8,"nodeType":"116","messageId":"117","endLine":2,"endColumn":12},{"ruleId":"114","severity":1,"message":"118","line":25,"column":5,"nodeType":"116","messageId":"117","endLine":25,"endColumn":14},{"ruleId":"114","severity":1,"message":"119","line":26,"column":5,"nodeType":"116","messageId":"117","endLine":26,"endColumn":12},{"ruleId":"114","severity":1,"message":"120","line":27,"column":5,"nodeType":"116","messageId":"117","endLine":27,"endColumn":12},{"ruleId":"114","severity":1,"message":"121","line":28,"column":5,"nodeType":"116","messageId":"117","endLine":28,"endColumn":12},{"ruleId":"114","severity":1,"message":"122","line":29,"column":5,"nodeType":"116","messageId":"117","endLine":29,"endColumn":13},{"ruleId":"114","severity":1,"message":"123","line":30,"column":5,"nodeType":"116","messageId":"117","endLine":30,"endColumn":15},{"ruleId":"114","severity":1,"message":"124","line":31,"column":5,"nodeType":"116","messageId":"117","endLine":31,"endColumn":11},{"ruleId":"114","severity":1,"message":"125","line":32,"column":5,"nodeType":"116","messageId":"117","endLine":32,"endColumn":10},{"ruleId":"114","severity":1,"message":"126","line":3,"column":3,"nodeType":"116","messageId":"117","endLine":3,"endColumn":20},{"ruleId":"114","severity":1,"message":"127","line":5,"column":22,"nodeType":"116","messageId":"117","endLine":5,"endColumn":27},{"ruleId":"114","severity":1,"message":"128","line":6,"column":19,"nodeType":"116","messageId":"117","endLine":6,"endColumn":32},{"ruleId":"110","replacedBy":"129"},{"ruleId":"112","replacedBy":"130"},{"ruleId":"114","severity":1,"message":"131","line":1,"column":10,"nodeType":"116","messageId":"117","endLine":1,"endColumn":18},{"ruleId":"114","severity":1,"message":"132","line":2,"column":10,"nodeType":"116","messageId":"117","endLine":2,"endColumn":16},{"ruleId":"114","severity":1,"message":"133","line":5,"column":19,"nodeType":"116","messageId":"117","endLine":5,"endColumn":27},{"ruleId":"114","severity":1,"message":"134","line":7,"column":8,"nodeType":"116","messageId":"117","endLine":7,"endColumn":13},{"ruleId":"114","severity":1,"message":"135","line":7,"column":17,"nodeType":"116","messageId":"117","endLine":7,"endColumn":21},{"ruleId":"114","severity":1,"message":"136","line":7,"column":23,"nodeType":"116","messageId":"117","endLine":7,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":34,"column":6,"nodeType":"139","endLine":34,"endColumn":32,"suggestions":"140"},{"ruleId":"114","severity":1,"message":"141","line":3,"column":3,"nodeType":"116","messageId":"117","endLine":3,"endColumn":15},{"ruleId":"114","severity":1,"message":"142","line":5,"column":3,"nodeType":"116","messageId":"117","endLine":5,"endColumn":21},{"ruleId":"114","severity":1,"message":"143","line":6,"column":3,"nodeType":"116","messageId":"117","endLine":6,"endColumn":19},{"ruleId":"114","severity":1,"message":"144","line":7,"column":3,"nodeType":"116","messageId":"117","endLine":7,"endColumn":14},{"ruleId":"114","severity":1,"message":"145","line":8,"column":3,"nodeType":"116","messageId":"117","endLine":8,"endColumn":20},{"ruleId":"114","severity":1,"message":"146","line":13,"column":10,"nodeType":"116","messageId":"117","endLine":13,"endColumn":15},{"ruleId":"114","severity":1,"message":"147","line":13,"column":17,"nodeType":"116","messageId":"117","endLine":13,"endColumn":28},{"ruleId":"114","severity":1,"message":"148","line":17,"column":10,"nodeType":"116","messageId":"117","endLine":17,"endColumn":25},{"ruleId":"137","severity":1,"message":"149","line":84,"column":6,"nodeType":"139","endLine":84,"endColumn":12,"suggestions":"150"},{"ruleId":"114","severity":1,"message":"119","line":112,"column":11,"nodeType":"116","messageId":"117","endLine":112,"endColumn":18},{"ruleId":"114","severity":1,"message":"124","line":112,"column":29,"nodeType":"116","messageId":"117","endLine":112,"endColumn":35},{"ruleId":"114","severity":1,"message":"120","line":112,"column":37,"nodeType":"116","messageId":"117","endLine":112,"endColumn":44},{"ruleId":"137","severity":1,"message":"149","line":129,"column":6,"nodeType":"139","endLine":129,"endColumn":12,"suggestions":"151"},{"ruleId":"137","severity":1,"message":"152","line":136,"column":6,"nodeType":"139","endLine":136,"endColumn":15,"suggestions":"153"},{"ruleId":"137","severity":1,"message":"154","line":21,"column":6,"nodeType":"139","endLine":21,"endColumn":8,"suggestions":"155"},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'connector' is assigned a value but never used.","'library' is assigned a value but never used.","'chainId' is assigned a value but never used.","'account' is assigned a value but never used.","'activate' is assigned a value but never used.","'deactivate' is assigned a value but never used.","'active' is assigned a value but never used.","'error' is assigned a value but never used.","'Web3ReactProvider' is defined but never used.","'state' is assigned a value but never used.","'refetchDomain' is assigned a value but never used.",["156"],["157"],"'Provider' is defined but never used.","'Signer' is defined but never used.","'useState' is defined but never used.","'Maybe' is defined but never used.","'Just' is defined but never used.","'Nothing' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'chainId'. Either include it or remove the dependency array.","ArrayExpression",["158"],"'DocumentNode' is defined but never used.","'OperationVariables' is defined but never used.","'QueryHookOptions' is defined but never used.","'QueryResult' is defined but never used.","'TypedDocumentNode' is defined but never used.","'Query' is defined but never used.","'queryByRole' is defined but never used.","'useZnsContracts' is defined but never used.","React Hook useMemo has a missing dependency: 'error'. Either include it or remove the dependency array.",["159"],["160"],"React Hook useEffect has missing dependencies: 'getControlled' and 'refetch'. Either include them or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'activate'. Either include it or remove the dependency array.",["162"],"no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"165","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [active, library, chainId]",{"range":"172","text":"173"},"Update the dependencies array to be: [data, error]",{"range":"174","text":"175"},{"range":"176","text":"175"},"Update the dependencies array to be: [account, getControlled, refetch]",{"range":"177","text":"178"},"Update the dependencies array to be: [activate]",{"range":"179","text":"180"},[982,1008],"[active, library, chainId]",[1689,1695],"[data, error]",[2808,2814],[2999,3008],"[account, getControlled, refetch]",[522,524],"[activate]"]